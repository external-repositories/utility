// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#ifndef UTILITY_STREAM_XYSTREAM_HPP
#define UTILITY_STREAM_XYSTREAM_HPP
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// system includes
#include <iostream>
#include <map>
#include <stdexcept>

// other includes

namespace utility {

  namespace stream {

    /** @{
     *  @name Linked x,y template streaming functions
     */
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Linked x,y template streaming functions
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /** @brief Read a value from a stream
     *
     *  The readValue function will read a value of type Y from a stream and
     *  transform it into its corresponding X value. Only those x values that
     *  are referenced in the map are considered as legal x values.
     *
     *  Simply put, the readValue function will read a value of type Y from a
     *  stream and transform it into its corresponding X value. This function
     *  can for instance be used in the implementation of iostream operators of
     *  enumerators for which the values are linked to other types such as
     *  strings, integers or even doubles. This function is defined as a
     *  template function so that the same code does not have to be written
     *  multiple times.
     *
     *  @todo investigate the use of a template linker class instead of the map
     *        to extend the x,y linking beyond one on one values (e.g. linked a
     *        range of y values to a given x value, etc.).
     *
     *  @param[in,out] in   the input stream from which to read
     *  @param[in,out] x    the x value
     *  @param[in] values   the map linking y to x values
     *
     *  @return The input stream. If the function failed to read one of the
     *          values from the map, the position in the stream will be
     *          unchanged and std::ios_base::failbit will be set. In this case
     *          the value of x will also be unchanged.
     */
    template <typename X, typename Y> std::istream& readValue(std::istream& in,
            X& x, const std::map<Y, X>& values) noexcept {

      std::ios::pos_type pos = in.tellg();
      Y y;
      in >> y;

      try {

        x = values.at(y);
      }
      catch (std::out_of_range& error) {

        in.clear();
        in.seekg(pos);
        in.clear(std::ios_base::failbit);
      }

      return in;
    }

    /** @brief Write a value to a stream
     *
     *  The writeValue function writes the corresponding Y value to a stream
     *  instead of the given X value. Only those x values that are referenced in
     *  the map are considered as legal x values. Nothing will be written to the
     *  stream if the x value is not referenced in the map.
     *
     *  Simply put, the writeValue function does the same thing by writing the
     *  corresponding Y value of a given X value to a stream. This function can
     *  for instance be used in the implementation of iostream operators of
     *  enumerators for which the values are linked to other types such as
     *  strings, integers or even doubles. This function is defined as a template
     *  function so that the same code does not have to be written multiple
     *  times.
     *
     *  @param[in,out] out   the output stream to which has to be written
     *  @param[in] x         the x value
     *  @param[in] values    the map linking x to y values
     *
     *  @return The modified output stream
     */
    template <typename X, typename Y> std::ostream& writeValue(std::ostream& out,
            const X& x, const std::map<X, Y>& values) noexcept {

      try {

        out << values.at(x);
      }
      catch (std::out_of_range& error) {

        // do nothing
      }

      return out;
    }
    /** @}
     */
  } // stream namespace
} // utility namespace

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#endif
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

